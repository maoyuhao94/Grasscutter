// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AllShareCDDataNotify.proto

public final class AllShareCDDataNotifyOuterClass {
  private AllShareCDDataNotifyOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AllShareCDDataNotifyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:AllShareCDDataNotify)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
     */
    int getShareCdInfoMapCount();
    /**
     * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
     */
    boolean containsShareCdInfoMap(
        int key);
    /**
     * Use {@link #getShareCdInfoMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo>
    getShareCdInfoMap();
    /**
     * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
     */
    java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo>
    getShareCdInfoMapMap();
    /**
     * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
     */

    ShareCDInfoOuterClass.ShareCDInfo getShareCdInfoMapOrDefault(
        int key,
        ShareCDInfoOuterClass.ShareCDInfo defaultValue);
    /**
     * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
     */

    ShareCDInfoOuterClass.ShareCDInfo getShareCdInfoMapOrThrow(
        int key);
  }
  /**
   * Protobuf type {@code AllShareCDDataNotify}
   */
  public static final class AllShareCDDataNotify extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:AllShareCDDataNotify)
      AllShareCDDataNotifyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AllShareCDDataNotify.newBuilder() to construct.
    private AllShareCDDataNotify(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AllShareCDDataNotify() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AllShareCDDataNotify();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AllShareCDDataNotify(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                shareCdInfoMap_ = com.google.protobuf.MapField.newMapField(
                    ShareCdInfoMapDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo>
              shareCdInfoMap__ = input.readMessage(
                  ShareCdInfoMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              shareCdInfoMap_.getMutableMap().put(
                  shareCdInfoMap__.getKey(), shareCdInfoMap__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return AllShareCDDataNotifyOuterClass.internal_static_AllShareCDDataNotify_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetShareCdInfoMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return AllShareCDDataNotifyOuterClass.internal_static_AllShareCDDataNotify_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              AllShareCDDataNotifyOuterClass.AllShareCDDataNotify.class, AllShareCDDataNotifyOuterClass.AllShareCDDataNotify.Builder.class);
    }

    /**
     * Protobuf enum {@code AllShareCDDataNotify.EEMPBEJEDNO}
     */
    public enum EEMPBEJEDNO
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0, 0),
      /**
       * <code>PEPPOHPHJOJ = 9005;</code>
       */
      PEPPOHPHJOJ(1, 9005),
      /**
       * <code>NNBKOLMPOEA = 1;</code>
       */
      NNBKOLMPOEA(3, 1),
      UNRECOGNIZED(-1, -1),
      ;

      /**
       * <code>DCDNILFDFLB = 0;</code>
       */
      public static final EEMPBEJEDNO DCDNILFDFLB = NONE;
      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>PEPPOHPHJOJ = 9005;</code>
       */
      public static final int PEPPOHPHJOJ_VALUE = 9005;
      /**
       * <code>DCDNILFDFLB = 0;</code>
       */
      public static final int DCDNILFDFLB_VALUE = 0;
      /**
       * <code>NNBKOLMPOEA = 1;</code>
       */
      public static final int NNBKOLMPOEA_VALUE = 1;


      public final int getNumber() {
        if (index == -1) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EEMPBEJEDNO valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static EEMPBEJEDNO forNumber(int value) {
        switch (value) {
          case 0: return NONE;
          case 9005: return PEPPOHPHJOJ;
          case 1: return NNBKOLMPOEA;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<EEMPBEJEDNO>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          EEMPBEJEDNO> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<EEMPBEJEDNO>() {
              public EEMPBEJEDNO findValueByNumber(int number) {
                return EEMPBEJEDNO.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (index == -1) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return AllShareCDDataNotifyOuterClass.AllShareCDDataNotify.getDescriptor().getEnumTypes().get(0);
      }

      private static final EEMPBEJEDNO[] VALUES = getStaticValuesArray();
      private static EEMPBEJEDNO[] getStaticValuesArray() {
        return new EEMPBEJEDNO[] {
          NONE, PEPPOHPHJOJ, DCDNILFDFLB, NNBKOLMPOEA, 
        };
      }
      public static EEMPBEJEDNO valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private EEMPBEJEDNO(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:AllShareCDDataNotify.EEMPBEJEDNO)
    }

    public static final int SHARECDINFOMAP_FIELD_NUMBER = 2;
    private static final class ShareCdInfoMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo>newDefaultInstance(
                  AllShareCDDataNotifyOuterClass.internal_static_AllShareCDDataNotify_ShareCdInfoMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.UINT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  ShareCDInfoOuterClass.ShareCDInfo.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> shareCdInfoMap_;
    private com.google.protobuf.MapField<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo>
    internalGetShareCdInfoMap() {
      if (shareCdInfoMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ShareCdInfoMapDefaultEntryHolder.defaultEntry);
      }
      return shareCdInfoMap_;
    }

    public int getShareCdInfoMapCount() {
      return internalGetShareCdInfoMap().getMap().size();
    }
    /**
     * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
     */

    @java.lang.Override
    public boolean containsShareCdInfoMap(
        int key) {
      
      return internalGetShareCdInfoMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getShareCdInfoMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> getShareCdInfoMap() {
      return getShareCdInfoMapMap();
    }
    /**
     * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> getShareCdInfoMapMap() {
      return internalGetShareCdInfoMap().getMap();
    }
    /**
     * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
     */
    @java.lang.Override

    public ShareCDInfoOuterClass.ShareCDInfo getShareCdInfoMapOrDefault(
        int key,
        ShareCDInfoOuterClass.ShareCDInfo defaultValue) {
      
      java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> map =
          internalGetShareCdInfoMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
     */
    @java.lang.Override

    public ShareCDInfoOuterClass.ShareCDInfo getShareCdInfoMapOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> map =
          internalGetShareCdInfoMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetShareCdInfoMap(),
          ShareCdInfoMapDefaultEntryHolder.defaultEntry,
          2);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> entry
           : internalGetShareCdInfoMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo>
        shareCdInfoMap__ = ShareCdInfoMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, shareCdInfoMap__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof AllShareCDDataNotifyOuterClass.AllShareCDDataNotify)) {
        return super.equals(obj);
      }
      AllShareCDDataNotifyOuterClass.AllShareCDDataNotify other = (AllShareCDDataNotifyOuterClass.AllShareCDDataNotify) obj;

      if (!internalGetShareCdInfoMap().equals(
          other.internalGetShareCdInfoMap())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetShareCdInfoMap().getMap().isEmpty()) {
        hash = (37 * hash) + SHARECDINFOMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetShareCdInfoMap().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(AllShareCDDataNotifyOuterClass.AllShareCDDataNotify prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code AllShareCDDataNotify}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:AllShareCDDataNotify)
        AllShareCDDataNotifyOuterClass.AllShareCDDataNotifyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return AllShareCDDataNotifyOuterClass.internal_static_AllShareCDDataNotify_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetShareCdInfoMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableShareCdInfoMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return AllShareCDDataNotifyOuterClass.internal_static_AllShareCDDataNotify_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                AllShareCDDataNotifyOuterClass.AllShareCDDataNotify.class, AllShareCDDataNotifyOuterClass.AllShareCDDataNotify.Builder.class);
      }

      // Construct using AllShareCDDataNotifyOuterClass.AllShareCDDataNotify.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableShareCdInfoMap().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return AllShareCDDataNotifyOuterClass.internal_static_AllShareCDDataNotify_descriptor;
      }

      @java.lang.Override
      public AllShareCDDataNotifyOuterClass.AllShareCDDataNotify getDefaultInstanceForType() {
        return AllShareCDDataNotifyOuterClass.AllShareCDDataNotify.getDefaultInstance();
      }

      @java.lang.Override
      public AllShareCDDataNotifyOuterClass.AllShareCDDataNotify build() {
        AllShareCDDataNotifyOuterClass.AllShareCDDataNotify result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public AllShareCDDataNotifyOuterClass.AllShareCDDataNotify buildPartial() {
        AllShareCDDataNotifyOuterClass.AllShareCDDataNotify result = new AllShareCDDataNotifyOuterClass.AllShareCDDataNotify(this);
        int from_bitField0_ = bitField0_;
        result.shareCdInfoMap_ = internalGetShareCdInfoMap();
        result.shareCdInfoMap_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof AllShareCDDataNotifyOuterClass.AllShareCDDataNotify) {
          return mergeFrom((AllShareCDDataNotifyOuterClass.AllShareCDDataNotify)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(AllShareCDDataNotifyOuterClass.AllShareCDDataNotify other) {
        if (other == AllShareCDDataNotifyOuterClass.AllShareCDDataNotify.getDefaultInstance()) return this;
        internalGetMutableShareCdInfoMap().mergeFrom(
            other.internalGetShareCdInfoMap());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        AllShareCDDataNotifyOuterClass.AllShareCDDataNotify parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (AllShareCDDataNotifyOuterClass.AllShareCDDataNotify) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> shareCdInfoMap_;
      private com.google.protobuf.MapField<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo>
      internalGetShareCdInfoMap() {
        if (shareCdInfoMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ShareCdInfoMapDefaultEntryHolder.defaultEntry);
        }
        return shareCdInfoMap_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo>
      internalGetMutableShareCdInfoMap() {
        onChanged();;
        if (shareCdInfoMap_ == null) {
          shareCdInfoMap_ = com.google.protobuf.MapField.newMapField(
              ShareCdInfoMapDefaultEntryHolder.defaultEntry);
        }
        if (!shareCdInfoMap_.isMutable()) {
          shareCdInfoMap_ = shareCdInfoMap_.copy();
        }
        return shareCdInfoMap_;
      }

      public int getShareCdInfoMapCount() {
        return internalGetShareCdInfoMap().getMap().size();
      }
      /**
       * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
       */

      @java.lang.Override
      public boolean containsShareCdInfoMap(
          int key) {
        
        return internalGetShareCdInfoMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getShareCdInfoMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> getShareCdInfoMap() {
        return getShareCdInfoMapMap();
      }
      /**
       * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> getShareCdInfoMapMap() {
        return internalGetShareCdInfoMap().getMap();
      }
      /**
       * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
       */
      @java.lang.Override

      public ShareCDInfoOuterClass.ShareCDInfo getShareCdInfoMapOrDefault(
          int key,
          ShareCDInfoOuterClass.ShareCDInfo defaultValue) {
        
        java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> map =
            internalGetShareCdInfoMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
       */
      @java.lang.Override

      public ShareCDInfoOuterClass.ShareCDInfo getShareCdInfoMapOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> map =
            internalGetShareCdInfoMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearShareCdInfoMap() {
        internalGetMutableShareCdInfoMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
       */

      public Builder removeShareCdInfoMap(
          int key) {
        
        internalGetMutableShareCdInfoMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo>
      getMutableShareCdInfoMap() {
        return internalGetMutableShareCdInfoMap().getMutableMap();
      }
      /**
       * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
       */
      public Builder putShareCdInfoMap(
          int key,
          ShareCDInfoOuterClass.ShareCDInfo value) {
        
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableShareCdInfoMap().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;uint32, .ShareCDInfo&gt; shareCdInfoMap = 2;</code>
       */

      public Builder putAllShareCdInfoMap(
          java.util.Map<java.lang.Integer, ShareCDInfoOuterClass.ShareCDInfo> values) {
        internalGetMutableShareCdInfoMap().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:AllShareCDDataNotify)
    }

    // @@protoc_insertion_point(class_scope:AllShareCDDataNotify)
    private static final AllShareCDDataNotifyOuterClass.AllShareCDDataNotify DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AllShareCDDataNotifyOuterClass.AllShareCDDataNotify();
    }

    public static AllShareCDDataNotifyOuterClass.AllShareCDDataNotify getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AllShareCDDataNotify>
        PARSER = new com.google.protobuf.AbstractParser<AllShareCDDataNotify>() {
      @java.lang.Override
      public AllShareCDDataNotify parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AllShareCDDataNotify(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AllShareCDDataNotify> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AllShareCDDataNotify> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public AllShareCDDataNotifyOuterClass.AllShareCDDataNotify getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AllShareCDDataNotify_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_AllShareCDDataNotify_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_AllShareCDDataNotify_ShareCdInfoMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_AllShareCDDataNotify_ShareCdInfoMapEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\032AllShareCDDataNotify.proto\032\021ShareCDInf" +
      "o.proto\"\357\001\n\024AllShareCDDataNotify\022A\n\016shar" +
      "eCdInfoMap\030\002 \003(\0132).AllShareCDDataNotify." +
      "ShareCdInfoMapEntry\032C\n\023ShareCdInfoMapEnt" +
      "ry\022\013\n\003key\030\001 \001(\r\022\033\n\005value\030\002 \001(\0132\014.ShareCD" +
      "Info:\0028\001\"O\n\013EEMPBEJEDNO\022\010\n\004NONE\020\000\022\020\n\013PEP" +
      "POHPHJOJ\020\255F\022\017\n\013DCDNILFDFLB\020\000\022\017\n\013NNBKOLMP" +
      "OEA\020\001\032\002\020\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          ShareCDInfoOuterClass.getDescriptor(),
        });
    internal_static_AllShareCDDataNotify_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_AllShareCDDataNotify_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_AllShareCDDataNotify_descriptor,
        new java.lang.String[] { "ShareCdInfoMap", });
    internal_static_AllShareCDDataNotify_ShareCdInfoMapEntry_descriptor =
      internal_static_AllShareCDDataNotify_descriptor.getNestedTypes().get(0);
    internal_static_AllShareCDDataNotify_ShareCdInfoMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_AllShareCDDataNotify_ShareCdInfoMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    ShareCDInfoOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
